{"ast":null,"code":"import myDjsonSampleata from './data.json';\nimport axios from 'axios';\nexport const UPDATE_EMAIL_SUCCESS = 'UPDATE_EMAIL_SUCCESS';\nexport const UPDATE_EMAIL_FAILURE = 'UPDATE_EMAIL_FAILURE';\n\n//This can be used used to update email for resending it MAYBE in case we need it... \nexport const updateEmail = (id, updatedData) => {\n  return dispatch => {\n    axios.put(`/api/emails/${id}`, updatedData) // Assuming your API endpoint is /api/emails/:id and accepts PUT requests\n    .then(response => {\n      // Dispatch the success action if the update was successful\n      dispatch({\n        type: UPDATE_EMAIL_SUCCESS,\n        payload: {\n          id,\n          updatedData\n        }\n      });\n    }).catch(error => {\n      // Dispatch the failure action if there was an error\n      dispatch({\n        type: UPDATE_EMAIL_FAILURE,\n        payload: {\n          id,\n          error\n        }\n      });\n    });\n  };\n};\n\n// Action creator to fetch data from the API\nexport const fetchData = () => {\n  return async dispatch => {\n    try {\n      // Dispatch a loading action to indicate that data is being fetched\n      dispatch({\n        type: 'FETCH_DATA_LOADING'\n      });\n      alert(\"Dfgdfg\");\n      // Fetch data from the API\n      const response = myDjsonSampleata;\n\n      //JSON.stringify(myDjsonSampleata);\n\n      //await axios.get('your-api-endpoint');\n\n      // Dispatch a success action with the received data\n      dispatch({\n        type: 'FETCH_DATA_SUCCESS',\n        payload: response\n      });\n    } catch (error) {\n      // Dispatch a failure action if the API call fails\n      dispatch({\n        type: 'FETCH_DATA_FAILURE',\n        payload: error.message\n      });\n    }\n  };\n};\nexport const fetchEmailDetails = emailId => async dispatch => {\n  try {\n    const emailData = myDjsonSampleata;\n    const filtered = emailData.emails.filter(proj => {\n      return proj.id === emailId;\n    });\n    dispatch({\n      type: 'FETCH_EMAIL_DETAILS_SUCCESS',\n      payload: filtered[0]\n    });\n  } catch (error) {\n    dispatch({\n      type: 'FETCH_EMAIL_DETAILS_FAILURE',\n      error: 'Failed to fetch email details.'\n    });\n  }\n};","map":{"version":3,"names":["myDjsonSampleata","axios","UPDATE_EMAIL_SUCCESS","UPDATE_EMAIL_FAILURE","updateEmail","id","updatedData","dispatch","put","then","response","type","payload","catch","error","fetchData","alert","message","fetchEmailDetails","emailId","emailData","filtered","emails","filter","proj"],"sources":["C:/Users/itzik/source/aig/pocReactRepository/src/actions/emailActions.js"],"sourcesContent":["import myDjsonSampleata from './data.json';\r\nimport axios from 'axios';\r\n\r\nexport const UPDATE_EMAIL_SUCCESS = 'UPDATE_EMAIL_SUCCESS';\r\nexport const UPDATE_EMAIL_FAILURE = 'UPDATE_EMAIL_FAILURE';\r\n\r\n//This can be used used to update email for resending it MAYBE in case we need it... \r\nexport const updateEmail = (id, updatedData) => {\r\n  return (dispatch) => {\r\n    axios\r\n      .put(`/api/emails/${id}`, updatedData) // Assuming your API endpoint is /api/emails/:id and accepts PUT requests\r\n      .then((response) => {\r\n        // Dispatch the success action if the update was successful\r\n        dispatch({\r\n          type: UPDATE_EMAIL_SUCCESS,\r\n          payload: { id, updatedData },\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        // Dispatch the failure action if there was an error\r\n        dispatch({\r\n          type: UPDATE_EMAIL_FAILURE,\r\n          payload: { id, error },\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\n\r\n\r\n\r\n// Action creator to fetch data from the API\r\nexport const fetchData = () => {\r\n  return async (dispatch) => {\r\n    try {\r\n      // Dispatch a loading action to indicate that data is being fetched\r\n      dispatch({ type: 'FETCH_DATA_LOADING' });\r\n\r\n      alert(\"Dfgdfg\");\r\n      // Fetch data from the API\r\n      const response = myDjsonSampleata;\r\n      \r\n      //JSON.stringify(myDjsonSampleata);\r\n      \r\n      //await axios.get('your-api-endpoint');\r\n\r\n      // Dispatch a success action with the received data\r\n      dispatch({ type: 'FETCH_DATA_SUCCESS', payload: response });\r\n    } catch (error) {\r\n      // Dispatch a failure action if the API call fails\r\n      dispatch({ type: 'FETCH_DATA_FAILURE', payload: error.message });\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchEmailDetails = (emailId) => async (dispatch) => {\r\n  try {\r\n    \r\n    \r\n    const emailData = myDjsonSampleata;\r\n\r\n    const filtered = emailData.emails.filter(proj => {\r\n      return proj.id === emailId;\r\n    });\r\n\r\n \r\n    dispatch({ type: 'FETCH_EMAIL_DETAILS_SUCCESS', payload: filtered[0] });\r\n  } catch (error) {\r\n    dispatch({ type: 'FETCH_EMAIL_DETAILS_FAILURE', error: 'Failed to fetch email details.' });\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,gBAAgB,MAAM,aAAa;AAC1C,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,oBAAoB,GAAG,sBAAsB;AAC1D,OAAO,MAAMC,oBAAoB,GAAG,sBAAsB;;AAE1D;AACA,OAAO,MAAMC,WAAW,GAAGA,CAACC,EAAE,EAAEC,WAAW,KAAK;EAC9C,OAAQC,QAAQ,IAAK;IACnBN,KAAK,CACFO,GAAG,CAAE,eAAcH,EAAG,EAAC,EAAEC,WAAW,CAAC,CAAC;IAAA,CACtCG,IAAI,CAAEC,QAAQ,IAAK;MAClB;MACAH,QAAQ,CAAC;QACPI,IAAI,EAAET,oBAAoB;QAC1BU,OAAO,EAAE;UAAEP,EAAE;UAAEC;QAAY;MAC7B,CAAC,CAAC;IACJ,CAAC,CAAC,CACDO,KAAK,CAAEC,KAAK,IAAK;MAChB;MACAP,QAAQ,CAAC;QACPI,IAAI,EAAER,oBAAoB;QAC1BS,OAAO,EAAE;UAAEP,EAAE;UAAES;QAAM;MACvB,CAAC,CAAC;IACJ,CAAC,CAAC;EACN,CAAC;AACH,CAAC;;AAKD;AACA,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAC7B,OAAO,MAAOR,QAAQ,IAAK;IACzB,IAAI;MACF;MACAA,QAAQ,CAAC;QAAEI,IAAI,EAAE;MAAqB,CAAC,CAAC;MAExCK,KAAK,CAAC,QAAQ,CAAC;MACf;MACA,MAAMN,QAAQ,GAAGV,gBAAgB;;MAEjC;;MAEA;;MAEA;MACAO,QAAQ,CAAC;QAAEI,IAAI,EAAE,oBAAoB;QAAEC,OAAO,EAAEF;MAAS,CAAC,CAAC;IAC7D,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd;MACAP,QAAQ,CAAC;QAAEI,IAAI,EAAE,oBAAoB;QAAEC,OAAO,EAAEE,KAAK,CAACG;MAAQ,CAAC,CAAC;IAClE;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAIC,OAAO,IAAK,MAAOZ,QAAQ,IAAK;EAChE,IAAI;IAGF,MAAMa,SAAS,GAAGpB,gBAAgB;IAElC,MAAMqB,QAAQ,GAAGD,SAAS,CAACE,MAAM,CAACC,MAAM,CAACC,IAAI,IAAI;MAC/C,OAAOA,IAAI,CAACnB,EAAE,KAAKc,OAAO;IAC5B,CAAC,CAAC;IAGFZ,QAAQ,CAAC;MAAEI,IAAI,EAAE,6BAA6B;MAAEC,OAAO,EAAES,QAAQ,CAAC,CAAC;IAAE,CAAC,CAAC;EACzE,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdP,QAAQ,CAAC;MAAEI,IAAI,EAAE,6BAA6B;MAAEG,KAAK,EAAE;IAAiC,CAAC,CAAC;EAC5F;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}