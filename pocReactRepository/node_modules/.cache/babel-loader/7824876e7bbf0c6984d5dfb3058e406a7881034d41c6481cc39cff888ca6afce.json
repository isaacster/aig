{"ast":null,"code":"import myDjsonSampleata from './data.json';\nimport axios from 'axios';\nexport const UPDATE_ENTITY = 'UPDATE_ENTITY';\n//will be used to update email for resending it in future date \nexport const updateEmail = (id, updatedData) => ({\n  type: UPDATE_ENTITY,\n  payload: {\n    id,\n    updatedData\n  }\n});\n\n// Action creator to fetch data from the API\nexport const fetchData = () => {\n  return async dispatch => {\n    try {\n      // Dispatch a loading action to indicate that data is being fetched\n      dispatch({\n        type: 'FETCH_DATA_LOADING'\n      });\n      ;\n      // Fetch data from the API\n      const response = myDjsonSampleata;\n\n      //JSON.stringify(myDjsonSampleata);\n\n      //await axios.get('your-api-endpoint');\n\n      // Dispatch a success action with the received data\n      dispatch({\n        type: 'FETCH_DATA_SUCCESS',\n        payload: response\n      });\n    } catch (error) {\n      // Dispatch a failure action if the API call fails\n      dispatch({\n        type: 'FETCH_DATA_FAILURE',\n        payload: error.message\n      });\n    }\n  };\n};\nexport const fetchEmailDetails = emailId => async dispatch => {\n  try {\n    //Getting the data from json for testing purposes only !\n    //const response = await fetch(`/api/projects/${projectId}`);\n\n    const projectsData = myDjsonSampleata;\n    const filtered = projectsData.projects.filter(proj => {\n      return proj.id === emailId;\n    });\n    dispatch({\n      type: 'FETCH_EMAIL_DETAILS_SUCCESS',\n      payload: filtered[0]\n    });\n  } catch (error) {\n    dispatch({\n      type: 'FETCH_EMAIL_DETAILS_FAILURE',\n      error: 'Failed to fetch email details.'\n    });\n  }\n};","map":{"version":3,"names":["myDjsonSampleata","axios","UPDATE_ENTITY","updateEmail","id","updatedData","type","payload","fetchData","dispatch","response","error","message","fetchEmailDetails","emailId","projectsData","filtered","projects","filter","proj"],"sources":["C:/Users/itzik/source/aig/pocReactRepository/src/actions/emailActions.js"],"sourcesContent":["import myDjsonSampleata from './data.json';\r\nimport axios from 'axios';\r\n\r\n\r\nexport const UPDATE_ENTITY = 'UPDATE_ENTITY';\r\n//will be used to update email for resending it in future date \r\nexport const updateEmail = (id, updatedData) => ({\r\n  type: UPDATE_ENTITY,\r\n  payload: { id, updatedData },\r\n});\r\n\r\n\r\n\r\n\r\n// Action creator to fetch data from the API\r\nexport const fetchData = () => {\r\n  return async (dispatch) => {\r\n    try {\r\n      // Dispatch a loading action to indicate that data is being fetched\r\n      dispatch({ type: 'FETCH_DATA_LOADING' });\r\n\r\n ;\r\n      // Fetch data from the API\r\n      const response = myDjsonSampleata;\r\n      \r\n      //JSON.stringify(myDjsonSampleata);\r\n      \r\n      //await axios.get('your-api-endpoint');\r\n\r\n      // Dispatch a success action with the received data\r\n      dispatch({ type: 'FETCH_DATA_SUCCESS', payload: response });\r\n    } catch (error) {\r\n      // Dispatch a failure action if the API call fails\r\n      dispatch({ type: 'FETCH_DATA_FAILURE', payload: error.message });\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchEmailDetails = (emailId) => async (dispatch) => {\r\n  try {\r\n    //Getting the data from json for testing purposes only !\r\n    //const response = await fetch(`/api/projects/${projectId}`);\r\n\r\n     \r\n    const projectsData = myDjsonSampleata;\r\n\r\n    const filtered = projectsData.projects.filter(proj => {\r\n      return proj.id === emailId;\r\n    });\r\n\r\n \r\n    dispatch({ type: 'FETCH_EMAIL_DETAILS_SUCCESS', payload: filtered[0] });\r\n  } catch (error) {\r\n    dispatch({ type: 'FETCH_EMAIL_DETAILS_FAILURE', error: 'Failed to fetch email details.' });\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,gBAAgB,MAAM,aAAa;AAC1C,OAAOC,KAAK,MAAM,OAAO;AAGzB,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C;AACA,OAAO,MAAMC,WAAW,GAAGA,CAACC,EAAE,EAAEC,WAAW,MAAM;EAC/CC,IAAI,EAAEJ,aAAa;EACnBK,OAAO,EAAE;IAAEH,EAAE;IAAEC;EAAY;AAC7B,CAAC,CAAC;;AAKF;AACA,OAAO,MAAMG,SAAS,GAAGA,CAAA,KAAM;EAC7B,OAAO,MAAOC,QAAQ,IAAK;IACzB,IAAI;MACF;MACAA,QAAQ,CAAC;QAAEH,IAAI,EAAE;MAAqB,CAAC,CAAC;MAE7C;MACK;MACA,MAAMI,QAAQ,GAAGV,gBAAgB;;MAEjC;;MAEA;;MAEA;MACAS,QAAQ,CAAC;QAAEH,IAAI,EAAE,oBAAoB;QAAEC,OAAO,EAAEG;MAAS,CAAC,CAAC;IAC7D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;MACAF,QAAQ,CAAC;QAAEH,IAAI,EAAE,oBAAoB;QAAEC,OAAO,EAAEI,KAAK,CAACC;MAAQ,CAAC,CAAC;IAClE;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAIC,OAAO,IAAK,MAAOL,QAAQ,IAAK;EAChE,IAAI;IACF;IACA;;IAGA,MAAMM,YAAY,GAAGf,gBAAgB;IAErC,MAAMgB,QAAQ,GAAGD,YAAY,CAACE,QAAQ,CAACC,MAAM,CAACC,IAAI,IAAI;MACpD,OAAOA,IAAI,CAACf,EAAE,KAAKU,OAAO;IAC5B,CAAC,CAAC;IAGFL,QAAQ,CAAC;MAAEH,IAAI,EAAE,6BAA6B;MAAEC,OAAO,EAAES,QAAQ,CAAC,CAAC;IAAE,CAAC,CAAC;EACzE,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdF,QAAQ,CAAC;MAAEH,IAAI,EAAE,6BAA6B;MAAEK,KAAK,EAAE;IAAiC,CAAC,CAAC;EAC5F;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}