{"ast":null,"code":"import myDjsonSampleata from './data.json';\nimport axios from 'axios';\n\n// Action creator to fetch data from the API\nexport const fetchData = () => {\n  return async dispatch => {\n    try {\n      // Dispatch a loading action to indicate that data is being fetched\n      dispatch({\n        type: 'FETCH_DATA_LOADING'\n      });\n      ;\n      // Fetch data from the API\n      const response = myDjsonSampleata;\n\n      //JSON.stringify(myDjsonSampleata);\n\n      //await axios.get('your-api-endpoint');\n\n      // Dispatch a success action with the received data\n      dispatch({\n        type: 'FETCH_DATA_SUCCESS',\n        payload: response\n      });\n    } catch (error) {\n      // Dispatch a failure action if the API call fails\n      dispatch({\n        type: 'FETCH_DATA_FAILURE',\n        payload: error.message\n      });\n    }\n  };\n};\nexport const fetchProjectDetails = projectId => async dispatch => {\n  try {\n    //Getting the data from json for testing purposes only !\n    //const response = await fetch(`/api/projects/${projectId}`);\n\n    const projectsData = myDjsonSampleata;\n    const filtered = projectsData.projects.filter(proj => {\n      return proj.id === projectId;\n    });\n    dispatch({\n      type: 'FETCH_PROJECT_DETAILS_SUCCESS',\n      payload: filtered[0]\n    });\n  } catch (error) {\n    dispatch({\n      type: 'FETCH_PROJECT_DETAILS_FAILURE',\n      error: 'Failed to fetch project details.'\n    });\n  }\n};","map":{"version":3,"names":["myDjsonSampleata","axios","fetchData","dispatch","type","response","payload","error","message","fetchProjectDetails","projectId","projectsData","filtered","projects","filter","proj","id"],"sources":["C:/Users/itzik/source/repos2/pocReactRepository/src/actions/projectActions.js"],"sourcesContent":["import myDjsonSampleata from './data.json';\r\nimport axios from 'axios';\r\n\r\n// Action creator to fetch data from the API\r\nexport const fetchData = () => {\r\n  return async (dispatch) => {\r\n    try {\r\n      // Dispatch a loading action to indicate that data is being fetched\r\n      dispatch({ type: 'FETCH_DATA_LOADING' });\r\n\r\n ;\r\n      // Fetch data from the API\r\n      const response = myDjsonSampleata;\r\n      \r\n      //JSON.stringify(myDjsonSampleata);\r\n      \r\n      //await axios.get('your-api-endpoint');\r\n\r\n      // Dispatch a success action with the received data\r\n      dispatch({ type: 'FETCH_DATA_SUCCESS', payload: response });\r\n    } catch (error) {\r\n      // Dispatch a failure action if the API call fails\r\n      dispatch({ type: 'FETCH_DATA_FAILURE', payload: error.message });\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchProjectDetails = (projectId) => async (dispatch) => {\r\n  try {\r\n    //Getting the data from json for testing purposes only !\r\n    //const response = await fetch(`/api/projects/${projectId}`);\r\n\r\n     \r\n    const projectsData = myDjsonSampleata;\r\n\r\n    const filtered = projectsData.projects.filter(proj => {\r\n      return proj.id === projectId;\r\n    });\r\n\r\n \r\n    dispatch({ type: 'FETCH_PROJECT_DETAILS_SUCCESS', payload: filtered[0] });\r\n  } catch (error) {\r\n    dispatch({ type: 'FETCH_PROJECT_DETAILS_FAILURE', error: 'Failed to fetch project details.' });\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,gBAAgB,MAAM,aAAa;AAC1C,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAC7B,OAAO,MAAOC,QAAQ,IAAK;IACzB,IAAI;MACF;MACAA,QAAQ,CAAC;QAAEC,IAAI,EAAE;MAAqB,CAAC,CAAC;MAE7C;MACK;MACA,MAAMC,QAAQ,GAAGL,gBAAgB;;MAEjC;;MAEA;;MAEA;MACAG,QAAQ,CAAC;QAAEC,IAAI,EAAE,oBAAoB;QAAEE,OAAO,EAAED;MAAS,CAAC,CAAC;IAC7D,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd;MACAJ,QAAQ,CAAC;QAAEC,IAAI,EAAE,oBAAoB;QAAEE,OAAO,EAAEC,KAAK,CAACC;MAAQ,CAAC,CAAC;IAClE;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAIC,SAAS,IAAK,MAAOP,QAAQ,IAAK;EACpE,IAAI;IACF;IACA;;IAGA,MAAMQ,YAAY,GAAGX,gBAAgB;IAErC,MAAMY,QAAQ,GAAGD,YAAY,CAACE,QAAQ,CAACC,MAAM,CAACC,IAAI,IAAI;MACpD,OAAOA,IAAI,CAACC,EAAE,KAAKN,SAAS;IAC9B,CAAC,CAAC;IAGFP,QAAQ,CAAC;MAAEC,IAAI,EAAE,+BAA+B;MAAEE,OAAO,EAAEM,QAAQ,CAAC,CAAC;IAAE,CAAC,CAAC;EAC3E,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdJ,QAAQ,CAAC;MAAEC,IAAI,EAAE,+BAA+B;MAAEG,KAAK,EAAE;IAAmC,CAAC,CAAC;EAChG;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}